{"version":3,"sources":["assets/icon.png","pages/landing/landing.page.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Landing","year","Date","getFullYear","className","src","icon","alt","href","rel","target","App","path","component","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,mWCmC5BC,EA9BC,WACd,IAAMC,GAAO,IAAIC,MAAOC,cAExB,OACE,yBAAKC,UAAU,gBACX,yBAAKA,UAAY,UACf,yBAAKC,IAAKC,IAAMF,UAAU,OAAOG,IAAI,SACrC,0BAAMH,UAAY,SAAlB,oBAEF,yBAAKA,UAAY,UACf,wBAAIA,UAAU,gBACV,4BACE,6BACE,uBAAGI,KAAK,0CAA0CC,IAAI,sBAAsBC,OAAO,UAAS,uBAAGN,UAAU,+BAA8B,yBAAKA,UAAY,eAAjB,kBAG3I,4BACE,6BACE,uBAAGI,KAAK,oCAAoCC,IAAI,sBAAsBC,OAAO,UAAS,uBAAGN,UAAU,gCAA+B,yBAAKA,UAAY,eAAjB,qBAIxI,gCACI,6DAAgCH,OCJjCU,E,uKAZX,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWb,IAChC,kBAAC,IAAD,CAAOY,KAAK,IAAIC,UAAWb,W,GARrBc,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ed2d1db8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.c596bc6d.png\";","\nimport React from 'react';\nimport './landing.styles.css';\nimport icon from '../../assets/icon.png';\n\nconst Landing = () => {\n  const year = new Date().getFullYear();\n\n  return (\n    <div className=\"landing-page\">\n        <div className = \"header\">\n          <img src={icon} className=\"logo\" alt=\"logo\" />\n          <span className = 'title'>FitBrit Fitness</span>\n        </div>\n        <div className = 'footer'>\n          <ul className=\"Social-Icons\">\n              <li>\n                <div>\n                  <a href=\"mailto:brittany.arora@fitbritfitness.ca\" rel=\"noopener noreferrer\" target=\"_blank\"><i className=\"fa fa-envelope icon tooltip\"><div className = 'tooltiptext'>Message Me</div></i></a>\n                </div>\n              </li>\n              <li>\n                <div>\n                  <a href=\"http://instagram.com/fitbrit_runs\" rel=\"noopener noreferrer\" target=\"_blank\"><i className=\"fa fa-instagram icon tooltip\"><div className = 'tooltiptext'>Instagram Me</div></i></a>              \n                </div>\n              </li>\n            </ul>\n            <footer>\n                <p>Copyright Â© FitBrit Fitness {year}</p>\n            </footer>\n          </div>\n      </div>\n    );\n};\n\nexport default Landing;","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport Home from \"./pages/home/home.page\";\nimport About from \"./pages/about/about.page\";\nimport Landing from \"./pages/landing/landing.page\";\n// import Project from \"./pages/project/project.component\";\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <BrowserRouter> \n          <Switch>\n            <Route path=\"/about\" component={Landing} />\n            <Route path=\"/\" component={Landing} />\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\nexport default App;\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}